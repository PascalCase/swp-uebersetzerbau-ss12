; ModuleID = 'math4.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  %summe = alloca i32, align 4
  %differenz = alloca i32, align 4
  store i32 0, i32* %1
  store i32 10, i32* %op1, align 4
  store i32 5, i32* %op2, align 4
  %2 = load i32* %op1, align 4
  %3 = load i32* %op2, align 4
  %4 = call i32 @addition(i32 %2, i32 %3)
  store i32 %4, i32* %summe, align 4
  %5 = load i32* %op1, align 4
  %6 = load i32* %op2, align 4
  %7 = call i32 @subtraktion(i32 %5, i32 %6)
  store i32 %7, i32* %differenz, align 4
  ret i32 0
}

define i32 @addition(i32 %summand1, i32 %summand2) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %summand1, i32* %1, align 4
  store i32 %summand2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = add nsw i32 %3, %4
  ret i32 %5
}

define i32 @subtraktion(i32 %minuend, i32 %subtrahent) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %minuend, i32* %1, align 4
  store i32 %subtrahent, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sub nsw i32 %3, %4
  ret i32 %5
}
